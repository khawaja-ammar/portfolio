---
import SVGIcon, { type Props as IconProps } from "./svg/SVGIcon.astro";
import CursorAnimation from "./ui/CursorAnimation.astro";

const navItems = [
  { label: "Home", href: "/" },
  { label: "Skills", href: "/skills" },
  // { label: "Projects", href: "/projects" },
  { label: "Work", href: "/work" },
  { label: "About", href: "/about" },
];

const iconLinks: { label: string; href: string; icon: IconProps["icon"] }[] = [
  {
    label: "Resume",
    href: "/ammarProfile.pdf",
    icon: "cv",
  },
  {
    label: "GitHub",
    href: "https://github.com/khawaja-ammar",
    icon: "logo_github",
  },
  {
    label: "LinkedIn",
    href: "https://www.linkedin.com/in/khawajaammar97/",
    icon: "logo_linkedIn",
  },
  {
    label: "Email (mailto)",
    href: "mailto:mammarkh@gmail.com",
    icon: "email",
  },
];

const url = Astro.url.pathname;
---

<nav
  class="flex w-full items-center justify-between font-code text-black dark:text-white"
>
  <a href="/" class="flex" title="Go to Home">
    <CursorAnimation
      className="text-base sm:text-lg md:text-xl xl:text-2xl dark:text-accentcolor-alt text-accentcolor"
    />
  </a>

  <ul
    class="hidden gap-4 rounded-full border-2 border-bordercolor border-opacity-25 bg-secondarycolor p-3 dark:border-bordercolor-dark dark:bg-secondarycolor-dark lg:flex"
  >
    {
      navItems.map(({ label, href }) => (
        <li class="list-none">
          <a
            class={`rounded-full px-2 py-1  ${
              url === href
                ? "bg-accentcolor text-white hover:opacity-100 dark:text-black"
                : "hover:bg-accentcolor-light hover:text-white hover:opacity-50 dark:hover:text-black"
            }`}
            href={href}
          >
            {label}
          </a>
        </li>
      ))
    }
  </ul>
  <div class="flex items-center gap-6">
    <div
      id="dark_mode_container"
      class="hidden hover:cursor-pointer hover:opacity-50 md:flex"
      title="Switch Theme"
    >
      <SVGIcon icon="darkMode" className="inline dark:hidden" />
      <SVGIcon icon="lightMode" color="white" className="hidden dark:inline" />
    </div>
    <div class="hidden h-[2em] rounded-full border border-accentcolor md:block">
    </div>
    <div class="hidden items-center gap-4 pr-2 md:flex">
      {
        iconLinks.map(({ href, icon, label }) => (
          <a
            href={href}
            target="_blank"
            class=" hover:opacity-50"
            title={label}
          >
            <span class="sr-only">{label}</span>
            <SVGIcon icon={icon} className="dark:fill-white" />
          </a>
        ))
      }
    </div>
    {/* Small Screen Menu */}
    <!-- Small Screen Modal -->
    <div
      id="smallscreen-modal"
      class="fixed left-0 top-0 hidden h-full w-full overflow-auto bg-black bg-opacity-40 [&.is-active]:z-10 [&.is-active]:block"
    >
    </div>
    <!-- Small Screen Toggle -->
    <div class="relative flex flex-col items-center lg:hidden">
      <button
        class="z-20 rotate-0 hover:cursor-pointer [&.is-active]:rotate-180"
        id="smallscreen-toggle"
        aria-label="Navigation Bar toggle"
      >
        <SVGIcon icon="downArrow" className="fill-orange-500 " />
      </button>

      <!-- Small Screen Content -->
      <div
        class="absolute right-0.5 top-12 z-20 hidden rounded-md border border-accentcolor bg-secondarycolor p-12 dark:bg-secondarycolor-dark [&.is-active]:block"
        id="smallscreen-content"
      >
        <ul class="flex flex-col">
          {
            navItems.map(({ label, href }) => (
              <li class="list-none">
                <a
                  class={`${
                    url === href ? "text-accentcolor" : "hover:opacity-50"
                  }`}
                  href={href}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
        <div class="flex items-center gap-6 pt-4 md:hidden">
          <div
            id="smallscreen-dark_mode_container"
            class="flex duration-300 hover:cursor-pointer hover:opacity-50"
            title="Switch Theme"
          >
            <SVGIcon icon="darkMode" className="inline dark:hidden" />
            <SVGIcon
              icon="lightMode"
              color="white"
              className="hidden dark:inline"
            />
          </div>
          <div class="h-[2em] rounded-full border border-accentcolor"></div>
          <div class="flex items-center gap-4">
            {
              iconLinks.map(({ href, icon, label }) => (
                <a
                  href={href}
                  target="_blank"
                  class="duration-300 hover:opacity-50"
                  title={label}
                >
                  <span class="sr-only">{label}</span>
                  <SVGIcon icon={icon} className="dark:fill-white" />
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- script for changing themes -->
<script>
  const container = document.getElementById("dark_mode_container");
  const smallScreenContainer = document.getElementById(
    "smallscreen-dark_mode_container"
  );

  if (container) {
    container.addEventListener("click", () => {
      const goDark = !document.documentElement.classList.contains("dark");
      document.documentElement.classList[goDark ? "add" : "remove"]("dark");
      localStorage.setItem("theme", goDark ? "dark" : "light");
    });
  }
  if (smallScreenContainer) {
    smallScreenContainer.addEventListener("click", () => {
      const goDark = !document.documentElement.classList.contains("dark");
      document.documentElement.classList[goDark ? "add" : "remove"]("dark");
      localStorage.setItem("theme", goDark ? "dark" : "light");
    });
  }
</script>

<!-- script of small screen toggle button -->
<script>
  const smallScreenToggle = document.getElementById("smallscreen-toggle");
  const smallScreenModal = document.getElementById("smallscreen-modal");
  const smallScreenContent = document.getElementById("smallscreen-content");

  if (smallScreenToggle && smallScreenContent && smallScreenModal) {
    let active = false;

    const setActive = () => {
      if (smallScreenToggle.classList.contains("is-active")) {
        smallScreenToggle.classList.remove("is-active");
        smallScreenModal.classList.remove("is-active");
        smallScreenContent.classList.remove("is-active");
      } else {
        smallScreenToggle.classList.add("is-active");
        smallScreenModal.classList.add("is-active");
        smallScreenContent.classList.add("is-active");
      }
    };

    if (window.innerWidth < 1024) {
      smallScreenToggle.addEventListener("click", setActive);
      active = true;
    }

    addEventListener("resize", () => {
      if (window.innerWidth > 1023 && active) {
        smallScreenToggle.classList.remove("is-active");
        smallScreenModal.classList.remove("is-active");
        smallScreenContent.classList.remove("is-active");

        smallScreenToggle.removeEventListener("click", setActive);
        active = false;
      } else {
        if (!active) {
          smallScreenToggle.addEventListener("click", setActive);
          active = true;
        }
      }
    });
  }
</script>
